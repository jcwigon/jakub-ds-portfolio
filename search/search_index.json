{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jakub Cwigon \u2013 Data Science Portfolio","text":"<p>Welcome to my portfolio! Here you will find my projects in the field of data science, machine learning and Python programming.</p>"},{"location":"projects/premier-league-stats-2021-2025-analysis/","title":"Premier League Statistics Analysis (2021\u20132025)","text":"<p>Date of creation: 2025-06-27</p>"},{"location":"projects/premier-league-stats-2021-2025-analysis/#project-description","title":"Project description","text":"<p>This project presents a comprehensive analysis of data from the English Premier League for the 2021\u20132025 seasons. The aim was to go through the entire data workflow \u2013 from acquisition, through processing and analysis, to visualization of results \u2013 using modern programming tools and NoSQL solutions.</p> <p>Key components of the project:</p> <ul> <li>NoSQL database: I used MongoDB to store, efficiently search, and analyze match data. The project also demonstrates how to run queries on a NoSQL database and perform data analysis directly in MongoDB.</li> <li>Python modules and classes: The codebase is structured as modular Python files and classes, ensuring a clear and easily expandable program architecture.</li> <li>Data acquisition (Open Data): Match results and statistics were sourced from open data repositories.</li> <li>Data analysis in Pandas: I performed data exploration, aggregation, and statistical calculations using the Pandas library.</li> <li>Data visualization: Key findings and trends are presented as clear and informative charts generated in Python.</li> </ul> <p>Through this project, I demonstrate in practice how to build custom Python modules, define classes, use NoSQL databases, acquire data from open sources, as well as analyze and search a MongoDB database, and present results in a clear visual form.</p> <p>Additionally, as a football enthusiast, I have prepared interesting analyses that answer questions such as:</p> <ul> <li>Do referees favor home teams?</li> <li>Does home advantage really matter?</li> <li>Which teams committed the most fouls in particular seasons?</li> <li>Is the Premier League becoming more attacking-oriented each year?</li> <li>Based on available data, I have also calculated a simplified, popular in modern football xG (Expected Goals) metric.</li> </ul>"},{"location":"projects/premier-league-stats-2021-2025-analysis/#skills","title":"Skills","text":"<ul> <li>Python </li> <li>Pandas </li> <li>Matplotlib </li> <li>MongoDB </li> <li>MkDocs </li> <li>Git </li> <li>Visual Studio Code </li> <li>Open Data </li> </ul>"},{"location":"projects/premier-league-stats-2021-2025-analysis/#project-structure","title":"Project structure","text":"<p>The project is organized into several Python modules and scripts, each responsible for a specific part of the analysis workflow:</p> <ul> <li>main.py \u2013 Entry point of the project; runs the full data analysis pipeline.</li> <li>analiza.py \u2013 Functions for data exploration and cleaning.</li> <li>statystyki.py \u2013 Computes match and season statistics.</li> <li>wizualizacje.py \u2013 Generates plots and visual summaries.</li> <li>pobieranie.py \u2013 Downloads data from open data sources.</li> <li>mongodb_analiza.py \u2013 Analysis and querying of the MongoDB NoSQL database.</li> <li>mongo_utworz_baze.py \u2013 Script for creating and populating the MongoDB database.</li> <li>requirements.txt \u2013 List of required Python packages.</li> <li>README.md \u2013 Project documentation and setup instructions.</li> <li>.csv files \u2013 Example input datasets.</li> </ul> <p>All modules are well documented, and the code follows a modular structure for clarity and easy maintenance.</p>"},{"location":"projects/premier-league-stats-2021-2025-analysis/#project-workflow","title":"Project Workflow","text":""},{"location":"projects/premier-league-stats-2021-2025-analysis/#main-analysis-script","title":"Main analysis script","text":"<p>Here is the complete Python script used as the entry point for the project:</p> <pre><code># tutaj wklej kod z main.py lub wyeksportowanego notebooka\nimport os\nimport numpy as np\nimport pandas as pd\nfrom analiza import AnalyzerMultiSeason\nfrom statystyki import StatystykiSezonu\nfrom wizualizacje import (\n    wykres_srednia_goli,\n    wykres_faule_kartki,\n    wykres_udzial_wygranych,\n    wykres_srednia_strzalow,\n    wykres_celnosc,\n    wykres_celnosc_druzyn,\n    wykres_strzaly_druzyn,\n    wykres_gole_druzyn_na_sezon,\n    wykres_xg_top10\n)\n\n# \ud83d\udcc2 Wczytaj dane z folderu\nfolder_path = \"C:/Moje/Python proj\"\npliki_csv = [plik for plik in os.listdir(folder_path) if plik.endswith(\".csv\")]\n\n# \ud83d\udd04 Wczytaj dane i dodaj kolumn\u0119 'Zwyciezca'\nanalyzer = AnalyzerMultiSeason(folder_path, pliki_csv)\ndf_all = analyzer.wczytaj_wszystkie_dane()\nanalyzer.dodaj_kolumne_zwyciezca()\n\n# \ud83d\udcca Obiekt klasy z analizami\nstat = StatystykiSezonu(df_all)\n\n# === ANALIZY TEKSTOWE ===\nprint(\"\u27a1\ufe0f \u015arednia liczba goli w sezonie:\")\nprint(stat.srednia_goli_per_sezon(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f \u015arednia liczba fauli i kartek:\")\nprint(stat.analiza_faul_kartki(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f Udzia\u0142 zwyci\u0119stw gospodarzy, remis\u00f3w i go\u015bci:\")\nprint(stat.udzial_wygranych_home_away(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f \u015arednia liczba strza\u0142\u00f3w:\")\nprint(stat.srednia_strzalow(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f Skuteczno\u015b\u0107 strza\u0142\u00f3w (gole/strza\u0142y):\")\nprint(stat.skutecznosc_strzalow(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f Strza\u0142y i skuteczno\u015b\u0107 dru\u017cyn:\")\nprint(stat.statystyki_strzalow_druzyn(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f Liczba goli strzelonych przez dru\u017cyny w ka\u017cdym sezonie:\")\nprint(stat.gole_druzyn_na_sezon(), \"\\n\")\nprint(\"-\" * 80)\n\nprint(\"\u27a1\ufe0f Uproszczony wska\u017anik xG na sezon:\")\nprint(stat.xg_per_season(), \"\\n\")\nprint(\"-\" * 80)\n\n# === WIZUALIZACJE ===\n\n# 1. \u015arednia goli na sezon\ndf_gole = stat.srednia_goli_per_sezon()\nwykres_srednia_goli(df_gole)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 2. Faule i kartki\ndf_faul_kartki = stat.analiza_faul_kartki()\nwykres_faule_kartki(df_faul_kartki)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 3. Udzia\u0142 zwyci\u0119stw\ndf_udzial = stat.udzial_wygranych_home_away()\nwykres_udzial_wygranych(df_udzial)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 4. \u015arednia liczba strza\u0142\u00f3w\ndf_srednia_strzalow = stat.srednia_strzalow()\nlista_strzalow = df_srednia_strzalow[\"\u015arednia\"].astype(float).tolist()\nwykres_srednia_strzalow(lista_strzalow)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 5. Skuteczno\u015b\u0107 strza\u0142\u00f3w\nseria_celnosc = stat.skutecznosc_strzalow()\nif isinstance(seria_celnosc, pd.Series):\n    lista_celnosc = seria_celnosc.astype(float).tolist()\nelif isinstance(seria_celnosc, pd.DataFrame) and \"Celno\u015b\u0107 [%]\" in seria_celnosc.columns:\n    lista_celnosc = seria_celnosc[\"Celno\u015b\u0107 [%]\"].astype(float).tolist()\nelse:\n    raise ValueError(\"Nieoczekiwany format danych dla skuteczno\u015bci strza\u0142\u00f3w.\")\nwykres_celnosc(lista_celnosc)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 6. Strza\u0142y i celno\u015b\u0107 dru\u017cyn\ndf_druzyny_strzaly = stat.statystyki_strzalow_druzyn()\nwykres_strzaly_druzyn(df_druzyny_strzaly)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\nwykres_celnosc_druzyn(df_druzyny_strzaly)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 7. Gole dru\u017cyn na sezon\ndf_gole_sezon = stat.gole_druzyn_na_sezon()\nwykres_gole_druzyn_na_sezon(df_gole_sezon)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n\n# 8. xG\ndf_xg_szeroko = stat.xg_per_season()\nwykres_xg_top10(df_xg_szeroko)\nprint(\"\\n\" + \"=\"*100 + \"\\n\")\n</code></pre>"},{"location":"projects/second-project/","title":"Second Project","text":"<p>\"# Second Project\" </p>"}]}